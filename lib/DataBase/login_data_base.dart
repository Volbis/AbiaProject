import 'package:mysql1/mysql1.dart';
import 'dart:async';

/// Classe utilitaire pour g√©rer les connexions √† la base de donn√©es MySQL.
class DatabaseConnection {
  // Configuration de la base de donn√©es
  static final ConnectionSettings _settings = ConnectionSettings(
    host: '127.0.0.1',  
    port: 3306,         
    user: 'root',      
    db: 'abia_db',      
  );
 
  /// Retourne une connexion MySQL utilisable
  static Future<MySqlConnection> getConnection() async {
    try {
      final conn = await MySqlConnection.connect(_settings);
      print("üîå Connexion √† la base de donn√©es √©tablie avec succ√®s");
      return conn;
    } catch (e) {
      print("‚ùå Erreur de connexion √† la base de donn√©es: $e");
      throw Exception('Impossible de se connecter √† la base de donn√©es: $e');
    }
  }

  /// Ex√©cute une requ√™te SQL avec des param√®tres et retourne les r√©sultats
  static Future<Results> executeQuery(String query, [List<Object>? params]) async {
    final conn = await getConnection();
    try {
      final results = await conn.query(query, params);
      return results;
    } finally {
      await conn.close();
    }
  }

  /// Ex√©cute une proc√©dure stock√©e et retourne les r√©sultats
  static Future<Results> callProcedure(String procedureName, List<Object> params) async {
    final conn = await getConnection();
    try {
      // Construction de la cha√Æne d'appel de proc√©dure
      final placeholders = List.generate(params.length, (index) => '?').join(',');
      final query = 'CALL $procedureName($placeholders)';
      
      final results = await conn.query(query, params);
      return results;
    } finally {
      await conn.close();
    }
  }
}